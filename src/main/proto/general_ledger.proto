/************************************************************************************
 * Copyright (C) 2018-present E.R.P. Consultores y Asociados, C.A.                  *
 * Contributor(s): Edwin Betancourt EdwinBetanc0urt@outlook.com                     *
 * This program is free software: you can redistribute it and/or modify             *
 * it under the terms of the GNU General Public License as published by             *
 * the Free Software Foundation, either version 2 of the License, or                *
 * (at your option) any later version.                                              *
 * This program is distributed in the hope that it will be useful,                  *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                   *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                     *
 * GNU General Public License for more details.                                     *
 * You should have received a copy of the GNU General Public License                *
 * along with this program. If not, see <https://www.gnu.org/licenses/>.            *
 ************************************************************************************/
syntax = "proto3";


option java_multiple_files = true;
option java_package = "org.spin.backend.grpc.general_ledger";
option java_outer_classname = "ADempiereGeneralLedger";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "base_data_type.proto";

// Base URL
// /general-ledger/

package general_ledger;

// The General Ledger service definition.
service GeneralLedger {
	// Accouting Element
	rpc ListAccoutingElements(ListAccoutingElementsRequest) returns (ListAccoutingElementsResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/schemas/{accouting_schema_id}/elements" };
	}
	rpc ListAccoutingElementValues(ListAccoutingElementValuesRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/schemas/{accouting_schema_id}/elements/{element_type}" };
	}

	// Accounting Combination
	rpc getAccountingCombination(GetAccountingCombinationRequest) returns (data.Entity) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/combinations/{id}"
			additional_bindings: {
				get: "/general-ledger/accounts/combinations/combination/{value}"
			}
		};
	}
	rpc ListAccountingCombinations(ListAccountingCombinationsRequest) returns (data.ListEntitiesResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/combinations" };
	}
	rpc SaveAccountingCombination(SaveAccountingCombinationRequest) returns (data.Entity) {
		option (google.api.http) = {
			post: "/general-ledger/accounts/combinations",
			body: "*"
		};
	}

	// Accounting Viewer
	rpc ListAccountingSchemas(ListAccountingSchemasRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/schemas" };
	}
	rpc ListPostingTypes(ListPostingTypesRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/posting-types" };
	}
	rpc ListOrganizations(ListOrganizationsRequest) returns (data.ListLookupItemsResponse) {
		option (google.api.http) = { get: "/general-ledger/organizations" };
	}
	rpc ListAccountingDocuments(ListAccountingDocumentsRequest) returns (ListAccountingDocumentsResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/documents" };
	}
	rpc ExistsAccoutingDocument(ExistsAccoutingDocumentRequest) returns (ExistsAccoutingDocumentResponse) {
		option (google.api.http) = { get: "/general-ledger/accounts/facts/{accounting_schema_id}/document/{table_name}/{record_id}/exists" };
	}
	rpc ListAccountingFacts(ListAccountingFactsRequest) returns (data.ListEntitiesResponse) {
		option (google.api.http) = {
			get: "/general-ledger/accounts/facts/{accounting_schema_id}"
			additional_bindings: {
				get: "/general-ledger/accounts/facts/{accounting_schema_id}/document/{table_name}/{record_id}"
			}
		};
	}
	rpc StartRePost(StartRePostRequest) returns (StartRePostResponse) {
		option (google.api.http) = {
			post: "/general-ledger/accounts/facts/{table_name}/{record_id}",
			body: "*"
		};
	}
}


// Accouting Element
message AccoutingElement {
	string element_type = 1;
	string column_name = 2;
	string name = 3;
	bool is_mandatory = 4;
	bool is_balanced = 5;
	int32 sequece = 6;
	repeated string context_column_names = 7;
	int32 display_type = 8;
	int32 field_id = 9;
}

message ListAccoutingElementsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	int32 accouting_schema_id = 9;
}

message ListAccoutingElementsResponse {
	int64 record_count = 1;
	repeated AccoutingElement accouting_elements = 2;
	string next_page_token = 3;
}

message AccoutingElementValue {
	int32 id = 1;
	string value = 2;
	string dispay_value = 3;
}

message ListAccoutingElementValuesRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
	// Custom Filters
	int32 accouting_schema_id = 10;
	string element_type = 11;
}

message ListAccoutingElementValuesResponse {
	int64 record_count = 1;
	repeated AccoutingElementValue accouting_element_values = 2;
	string next_page_token = 3;
}


// Accounting Combination
message GetAccountingCombinationRequest {
	int32 id = 1;
	string value = 2;
}

message ListAccountingCombinationsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	// custom filters
	string context_attributes = 8;
	int32 organization_id = 9;
	int32 account_id = 10;
}

message SaveAccountingCombinationRequest {
	int32 id = 1;
	int32 client_id = 2;
	int32 accounting_schema_id = 3;
	int32 organization_id = 4;
	int32 account_id = 5;
	string alias = 6;
	google.protobuf.Struct context_attributes = 7;
	google.protobuf.Struct attributes = 8;
}


// Accounting Schema
message ListAccountingSchemasRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
}

// Posting Type
message ListPostingTypesRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
}

// Accounting Document
message ListAccountingDocumentsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
}

message AccountingDocument {
	int32 id = 1;
	string name = 2;
	string table_name = 3;
}

message ListAccountingDocumentsResponse {
	int64 record_count = 1;
	repeated AccountingDocument records = 2;
	string next_page_token = 3;
}

// Organization
message ListOrganizationsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	string context_attributes = 8;
	bool is_only_active_records = 9;
}

// Accounting Fact
message ExistsAccoutingDocumentRequest {
	// mandatory filters
	int32 accounting_schema_id = 1;
	// document filters
	string table_name = 2;
	int32 record_id = 3;
}
message ExistsAccoutingDocumentResponse {
	bool is_show_accouting = 1;
}

message ListAccountingFactsRequest {
	string filters = 1;
	string sort_by = 2;
	repeated string group_columns = 3;
	repeated string select_columns = 4;
	int32 page_size = 5;
	string page_token = 6;
	string search_value = 7;
	// mandatory filters
	int32 accounting_schema_id = 8;
	// optional filter
	string posting_type = 9;
	// document filters
	string table_name = 10;
	int32 record_id = 11;
	//
	google.protobuf.Timestamp date_from = 12;
	google.protobuf.Timestamp date_to = 13;
	int32 organization_id = 14;
}

// Start Re-Post
message StartRePostRequest {
	string table_name = 1;
	int32 record_id = 2;
	bool is_force = 3;
}
message StartRePostResponse {
	string error_msg = 1;
}
