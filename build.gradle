plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'idea'
    id 'application'
    id 'visual-studio'
    id 'maven-publish'
}

group 'com.nikhilm'

sourceCompatibility = 1.11

def grpcVersion = '1.63.0'
def protobufVersion = '3.25.3'
def baseVersion = '3.9.4'
def baseGroupId = 'io.github.adempiere'
def customBaseVersion = ""

def descriptorFile = "adempiere-grpc-server.pb"
def javaMainClass = "org.spin.server.AllInOneServices"

repositories {
	mavenLocal()
    mavenCentral()
    maven {
    	url = System.getenv("GITHUB_DEPLOY_REPOSITORY") ?: System.properties['deploy.repository'] ?: 'https://maven.pkg.github.com/solop-develop/adempiere_customizations'
        credentials {
        	username = System.getenv("GITHUB_DEPLOY_USER") ?: System.properties['deploy.user']
            password = System.getenv("GITHUB_DEPLOY_TOKEN") ?: System.properties['deploy.token']
		}
	}
    maven {
        // Custom GitHub Organization
        // TODO: Configure correct url repository secrets
        // url = findProperty("deployRepository") ?: eSystem.properties['deploy.repository'] ?: System.getenv("GITHUB_DEPLOY_REPOSITORY") ?: 'https://maven.pkg.github.com/solop-develop/adempiere-solop'
        url = 'https://maven.pkg.github.com/solop-develop/adempiere-solop'
        credentials {
            // project property, system properrty, enviroment variable
            username = findProperty("deployUsername") ?: System.properties['deploy.user'] ?: System.getenv("GITHUB_SPDEV_USER")
            password = findProperty("deployToken") ?: System.properties['deploy.token'] ?: System.getenv("GITHUB_SPDEV_TOKEN")
        }
    }
    maven {
        // Adempiere GitHub Organization
        url = 'https://maven.pkg.github.com/adempiere/adempiere'
        credentials {
            // project property, system properrty, enviroment variable
            username = findProperty("deployUsername") ?: System.properties['deploy.user'] ?: System.getenv("GITHUB_DEPLOY_USER")
            password = findProperty("deployToken") ?: System.properties['deploy.token'] ?: System.getenv("GITHUB_DEPLOY_TOKEN")
        }
    }
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    maven { url "https://clojars.org/repo" }
    maven {
        url = "https://maven.pkg.github.com/spuy/spuy-core"
        credentials {
            username = System.getenv("GITHUB_DEPLOY_USER") ?: project.properties['deploy.user']
            password = System.getenv("GITHUB_DEPLOY_TOKEN") ?: project.properties['deploy.token']
        }
    }

	maven {
		url = "https://maven.google.com/"
	}
}
dependencies {
    implementation fileTree(
        dir: 'dependencies',
        include: [
            '*.jar'
        ]
    )

    //implementation project(":spuy-core")
    implementation 'uy.solop:050-spuy-core:3.9.4-r-17.10'

	implementation "io.netty:netty-handler:4.1.107.Final"
    implementation "io.grpc:grpc-alts:${grpcVersion}"
	runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
	implementation 'com.sun.xml.bind:jaxb-impl:3.0.0-M4'
	implementation 'com.sun.xml.bind:jaxb-core:3.0.0-M4'
	implementation 'javax.activation:activation:1.1.1'
	//	Others
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

	//	ADempiere Core + Patches + Features
	implementation "com.solop:adempiere.solop_libs:3.9.4.001-1.0.8"
}

configurations.all {
	resolutionStrategy {
		// used by aws-java-sdk-core (storefront is joda-time-2.10.4)
		force("joda-time:joda-time:2.8.1")
        force("com.amazonaws:aws-java-sdk-s3:1.12.756")
    }
}

protobuf {
    protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
		}
		all().configureEach { task ->
			// If true, will generate a descriptor_set.desc file under
			// task.outputBaseDir. Default is false.
			// See --descriptor_set_out in protoc documentation about what it is.
			task.generateDescriptorSet = true

			// Allows to override the default for the descriptor set location
			task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${descriptorFile}"
			// task.descriptorSetOptions.path = "${projectDir}/build/descriptors/adempiere-grpc-server.pb"

			// If true, the descriptor set will contain line number information
			// and comments. Default is false.
			task.descriptorSetOptions.includeSourceInfo = true
		
			// If true, the descriptor set will contain all transitive imports and
			// is therefore self-contained. Default is false.
			task.descriptorSetOptions.includeImports = true
		}
	}
}
// Copy proto descriptor another folder
allprojects {
	task copyDescriptor(type: Copy) {
		from "${projectDir}/build/descriptors/${descriptorFile}"
		into "${projectDir}/resources/"
		// into "${projectDir}/docker-compose/envoy/definitions/"
		// rename { "${descriptorFile}" }
	}

	tasks.matching {
		it.name.startsWith('compileJava')
	}.each { task ->
		task.finalizedBy copyDescriptor
	}
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'src/main/proto'
        }
        resources {
    		srcDirs 'src/main/java'
			include 'org/spin/base/version.properties'
        	include 'org/adempiere/legacy/apache/ecs/ecs.properties'
    	}
    }
}

startScripts.enabled = false

run {
	doFirst {
		// Set environment variables
		environment 'ADEMPIERE_APPS_TYPE', 'wildfly'
		environment 'JWT_SECRET_KEY', '2C51599F5B1248F945B93E05EFC43B3A15D8EB0707C0F02FD97028786C40976F'
		environment 'JWT_EXPIRATION_TIME', 86400000
	}
	args = [
		"resources/standalone.yaml"
	]
}

application {
	// mainClass = javaMainClass
	mainClass.set(javaMainClass)
}
jar {
	manifest {
		attributes(
			'Main-Class': javaMainClass
		)
	}
}

task ADempiereAllInOne(type: CreateStartScripts) {
	mainClass = javaMainClass
    applicationName = 'adempiere-all-in-one-server'
    defaultJvmOpts = Arrays.asList("-DPropertyFile=Adempiere.properties", "-Dorg.adempiere.server.embedded=true")
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtimeClasspath
}

applicationDistribution.into('bin') {
	from(ADempiereAllInOne)
    fileMode = 0755
}

//	Create release for project
task createRelease(type: Copy) {
   dependsOn build
   from file("$buildDir/distributions/")
   into file("$buildDir/release/")
   //destinationDir(file('build/release/'))
   doLast {
        file('build/release/')
        	.listFiles({file -> file.isFile()} as FileFilter).sort()
        	.each { File file ->
            ant.checksum file: file
        }
   	}
}

tasks.withType(Copy) { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
tasks.withType(Tar) { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
tasks.withType(Zip) { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }


task cleanBuild(type: GradleBuild) {
	tasks = ['clean', 'build']
}

def packageVersion = System.getenv("LIBRARY_VERSION") ?: '1.0.0'

publishing {
    repositories {
		mavenLocal()
        maven {
            url = System.properties['deploy.packages'] ?: System.getenv("GITHUB_PACKAGES_URL") ?: "https://maven.pkg.github.com/spuy/backend"
            credentials {
                username = project.properties['deploy.user'] ?: System.getenv("GITHUB_DEPLOY_USER")
                password = project.properties['deploy.token'] ?: System.getenv("GITHUB_DEPLOY_TOKEN")
            }
        }
    }
    publications {
		mavenJava(MavenPublication) {
        	groupId 'org.adempiere.backend'
            artifactId 'server'
            version packageVersion
           	from components.java
           	pom {
                name = 'ADempiere Backend Server'
                description = 'A gRPC Server based on ADempiere Persistence Object'
                url = 'https://www.erpya.com/'
                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yamelsenih'
                        name = 'Yamel Senih'
                        email = 'ysenih@erpya.com'
                    }
                }
            }
		}
	}
}
