# This workflow will build a Java project with Gradle
# This file was contributed by EdwinBetanc0urt@outlook.com from ERP Consultores y Asociados, C.A
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Publish Project

on:
  release:
    types:
      - created

jobs:

  # Build dist application backend
  build-app:
    name: Build dist Middleware
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Java JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-package: 'jdk'
          java-version: 11
          architecture: x64

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.0.1
          arguments: createRelease
        env:
          GITHUB_DEPLOY_USER: ${{ github.actor }}
          GITHUB_DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

      - name: Upload dist app zip artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend.zip
          path: build/release/backend.zip

      - name: Upload dist app zip.MD5 artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend.zip.MD5
          path: build/release/backend.zip.MD5

      - name: Upload dist app tar artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend.tar
          path: build/release/backend.tar

      - name: Upload dist app tar.MD5 artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend.tar.MD5
          path: build/release/backend.tar.MD5


  publish-binaries:
    name: Upload Binaries backend
    needs: build-app
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Upload zip
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: backend.zip/backend.zip

      - name: Upload zip.MD5
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: backend.zip.MD5/backend.zip.MD5

      - name: Upload tar
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: backend.tar/backend.tar

      - name: Upload tar.MD5
        uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: backend.tar.MD5/backend.tar.MD5


  # Check secrets to push image in docker hub registry
  check-docker-secrets:
    name: Check if docker hub registry information was set on secrets
    needs:
      - build-app
    runs-on: ubuntu-latest
    outputs:
      is_have_secrets: ${{ steps.check_secret_job.outputs.is_have_secrets }}
    steps:
      - id: check_secret_job
        run: |
          if [[ "${{ secrets.DOCKER_REPO_BACKEND }}" != "" && \
                "${{ secrets.DOCKER_USERNAME }}" != "" && \
                "${{ secrets.DOCKER_TOKEN }}" != "" ]]; \
          then
            echo "Secrets to use a container registry are configured in the repo"
            echo "is_have_secrets=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use a container registry were not configured in the repo"
            echo "is_have_secrets=false" >> $GITHUB_OUTPUT
          fi


  # TODO: Download .tar and add docker image without uncompress
  # Publish docker alpine image in Docker Hub Registry to application
  push-alpine-imame-dhr:
    name: Push docker alpine image to Docker Hub
    needs:
      - check-docker-secrets
    # Skip step based on secret
    if: needs.check-docker-secrets.outputs.is_have_secrets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download build dist app
        uses: actions/download-artifact@v3
        with:
          name: backend.zip
          path: dist

      - name: Unzip dist file
        run: |
          cd dist
          unzip -o backend.zip

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          # CONFIGURE DOCKER SECRETS INTO REPOSITORY
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push alpine image in Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: build-docker/production-alpine.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REPO_BACKEND }}:alpine-${{ github.event.release.tag_name }}
            ${{ secrets.DOCKER_REPO_BACKEND }}:alpine
          build-args: |
            JDK_RELEASE=11-jdk-alpine


  # TODO: Download .tar and add docker image without uncompress
  # Publish docker image in Docker Hub Registry to application
  push-imame-dhr:
    name: Push Docker image to Docker Hub
    needs:
      - check-docker-secrets
    # Skip step based on secret
    if: needs.check-docker-secrets.outputs.is_have_secrets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download build dist app
        uses: actions/download-artifact@v3
        with:
          name: backend.zip
          path: dist

      - name: Unzip dist file
        run: |
          cd dist
          unzip -o backend.zip

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          # CONFIGURE DOCKER SECRETS INTO REPOSITORY
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push image in Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./build-docker/production.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REPO_BACKEND }}:latest
            ${{ secrets.DOCKER_REPO_BACKEND }}:${{ github.event.release.tag_name }}
          build-args: |
            JDK_RELEASE=11-jdk

  # Check secrets to push image in docker hub registry
  check-digital-ocean-secrets:
    name: Check if digital ocean registry information was set on secrets
    needs:
      - build-app
    runs-on: ubuntu-latest
    outputs:
      is_have_secrets: ${{ steps.check_secret_job.outputs.is_have_secrets }}
    steps:
      - id: check_secret_job
        run: |
          if [[ "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" != "" && \
                "${{ secrets.DIGITALOCEAN_ORGANIZATION }}" != "" ]]; \
          then
            echo "Secrets to use a container registry are configured in the repo"
            echo "is_have_secrets=true" >> $GITHUB_OUTPUT
          else
            echo "Secrets to use a container registry were not configured in the repo"
            echo "is_have_secrets=false" >> $GITHUB_OUTPUT
          fi

  push-imame-do:
    name: Push Docker image to Digital Ocean
    needs:
      - check-digital-ocean-secrets
    # Skip step based on secret
    if: needs.check-digital-ocean-secrets.outputs.is_have_secrets == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download build dist app
        uses: actions/download-artifact@v3
        with:
          name: backend.zip
          path: dist

      - name: Unzip dist file
        run: |
          cd dist
          unzip -o backend.zip

      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 600
      - name: Build image
        run: docker build -t backend --build-arg GITHUB_DEPLOY_USER="${{ github.actor }}" --build-arg GITHUB_DEPLOY_TOKEN="${{ secrets.DEPLOY_TOKEN }}" -f docker/Dockerfile .
      - name: Tag image
        run: docker tag backend registry.digitalocean.com/${{ secrets.DIGITALOCEAN_ORGANIZATION }}/backend:${{ github.event.release.tag_name }}
      - name: Push image to DO Container Registry
        run: docker push registry.digitalocean.com/${{ secrets.DIGITALOCEAN_ORGANIZATION }}/backend:${{ github.event.release.tag_name }}
            